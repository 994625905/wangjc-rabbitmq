server.port=72
server.servlet.session.timeout = 7200

#rabbitMQ
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
#消息发送到交换机成功确认机制,是否确认回调
spring.rabbitmq.publisher-confirms=true
#消息发送到交换机失败确认机制,是否确认回调
spring.rabbitmq.publisher-returns=true
#默认情况下消息消费者是自动 ack （确认）消息的，如果要手动 ack（确认）则需要修改确认模式为 manual
#如果消息已经被处理，但后续代码抛出异常，使用 Spring 进行管理的话消费端业务逻辑会进行回滚，这也同样造成了实际意义的消息丢失
#如果手动确认则当消费者调用 ack、nack、reject 几种方法进行确认，手动确认可以在业务失败后进行一些操作，如果消息未被 ACK 则会发送到下一个消费者
#如果某个服务忘记 ACK 了，则 RabbitMQ 不会再发送数据给它，因为 RabbitMQ 认为该服务的处理能力有限
#ACK 机制还可以起到限流作用，比如在接收到某条消息时休眠几秒钟
#自动确认会在消息发送给消费者后立即确认，但存在丢失消息的可能，如果消费端消费逻辑抛出异常，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息
#AcknowledgeMode.NONE：自动确认
#AcknowledgeMode.AUTO：根据情况确认
#AcknowledgeMode.MANUAL：手动确认
spring.rabbitmq.listener.simple.acknowledge-mode=manual

logging.level.org.springframework.web=info
logging.level.org.springframework.boot.autoconfigure=ERROR
logging.level.com.wangjc.rabbitmq=debug
logging.file=wangjc-rabbitmq-consume.log